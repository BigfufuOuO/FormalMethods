MODULE main
    VAR
        c1_3: {0, 1, 5, 9, 13};
        c3_5: {0, 1, 5, 9, 13};
        c5_7: {0, 1, 5, 9, 13};
        c7_9: {0, 1, 5, 9, 13};
        c9_11: {0, 1, 5, 9, 13};
        c11_13: {0, 1, 5, 9, 13};
        c13_15: {0, 1, 5, 9, 13};
        c15_1: {0, 1, 5, 9, 13};
        -- center
        c3_17: {0, 1, 5, 9, 13};
        c7_17: {0, 1, 5, 9, 13};
        c11_17: {0, 1, 5, 9, 13};
        c15_17: {0, 1, 5, 9, 13};
        -- process
        pr1: process ac1_1(c15_1, c1_3, 1, {5, 9, 13}, TRUE);
        pr5: process ac1_1(c3_5, c5_7, 5, {1, 9, 13}, TRUE); 
        pr9: process ac1_1(c7_9, c9_11, 9, {1, 5, 13}, TRUE);
        pr13: process ac1_1(c11_13, c13_15, 13, {1, 5, 9}, TRUE);
        pr3: process ac1_1_T(c1_3, c3_5, c3_17, 5, 9, 13);
        pr7: process ac1_1_T(c5_7, c7_9, c7_17, 1, 9, 13);
        pr11: process ac1_1_T(c9_11, c11_13, c11_17, 1, 5, 13);
        pr15: process ac1_1_T(c13_15, c15_1, c15_17, 1, 5, 9);
        pr17: process ac_c(c3_17, c7_17, c11_17, c15_17);
    ASSIGN
        init(c1_3) := 0;
        init(c3_5) := 0;
        init(c5_7) := 0;
        init(c7_9) := 0;
        init(c9_11) := 0;
        init(c11_13) := 0;
        init(c13_15) := 0;
        init(c15_1) := 0;
        init(c3_17) := 0;
        init(c7_17) := 0;
        init(c11_17) := 0;
        init(c15_17) := 0;
        next(c1_3) := c1_3;
        next(c3_5) := c3_5;
        next(c5_7) := c5_7;
        next(c7_9) := c7_9;
        next(c9_11) := c9_11;
        next(c11_13) := c11_13;
        next(c13_15) := c13_15;
        next(c15_1) := c15_1;
        next(c3_17) := c3_17;
        next(c7_17) := c7_17;
        next(c11_17) := c11_17;
        next(c15_17) := c15_17;
    CTLSPEC
        AG (!(
            -- 1
            (c1_3 != 0 & c15_1 != 1) &
            -- 3
            ((c1_3 = 5 & c3_5 != 0) | (c3_17 = 5 & c3_5 != 0) | ((c1_3 = 9 | c1_3 = 13) & c3_17 !=0)) &
            -- 5
            (c3_5 !=5 & c5_7 != 0) &
            -- 7
            ((c5_7 = 9 & c7_9 != 0) | (c7_17 = 9 & c7_9 != 0) | ((c5_7 = 1 | c5_7 = 13) & c7_17 !=0)) &
            -- 9
            (c7_9 != 9 & c9_11 != 0) &
            -- 11
            ((c9_11 = 13 & c11_13 != 0) | (c11_17 = 13 & c11_13 != 0) | ((c9_11 = 5 | c9_11 = 1) & c11_17 !=0)) &
            -- 13
            (c11_13 != 13 & c13_15 != 0) &
            -- 15
            ((c13_15 = 1 & c15_1 != 0) | (c15_17 = 1 & c15_1 != 0) | ((c13_15 = 5 | c13_15 = 9) & c15_17 !=0)) &
            -- 17(center)
            (((c3_17 = 9 | c15_17 = 9) & c7_17 != 0) &
            ((c3_17 = 13 | c7_17 = 13) & c11_17 != 0) &
            ((c7_17 = 1 | c11_17 = 1) & c15_17 != 0) &
            ((c11_17 = 5 | c15_17 = 5) & c3_17 != 0))
        ))


MODULE ac1_1(from, to, id, M, s)
    FAIRNESS running
    VAR
        state: {send, prc};
    ASSIGN
        --state
        init(state) := {send, prc};
        next(state) := {send, prc};
        --from
        next(from) :=
            case
                (from = id) : 0;
                (state = prc & from != 0 & to = 0 & from != id) : 0; --转发信息
                TRUE: from;
            esac;
        -- to
        next(to) :=
            case
                (to = 0 & s = TRUE & state = send) : M; --发送信息
                (state = prc & from != 0 & to = 0 & from != id) : from; --转发信息
                TRUE: to;
            esac;

MODULE ac1_1_T(from, to, bidirect, t1, t2, t3)
    FAIRNESS running
    VAR
        -- prcfrom: from -> to, from -> bidirect
        -- prcto: bidirect -> to
        state: {prcfrom, prcto};
    ASSIGN
        init(state) := {prcfrom, prcto};
        next(state) := {prcfrom, prcto};
        -- from
        next(from) :=
            case
                (state = prcfrom & from != 0 & to = 0 & from = t1) : 0;
                (state = prcfrom & from != 0 & bidirect = 0 & (from = t2 | from = t3)) : 0;
                TRUE: from;
            esac;
        -- to
        next(to) :=
            case
                (state = prcfrom & from != 0 & to = 0 & from = t1) : from;
                (state = prcto & bidirect != 0 & to = 0 & bidirect = t1) : bidirect;
                TRUE: to;
            esac;
        -- bidirect
        next(bidirect) :=
            case
                -- bidirect -> to
                (state = prcfrom & bidirect != 0 & to = 0 & bidirect = t1) : from;
                -- from -> bidirect
                (state = prcto & from != 0 & to = 0 & (from = t2|from = t3)) : from;
                TRUE: bidirect;
            esac;

MODULE ac_c(l1, l2, l3, l4)
    FAIRNESS running
    VAR
        --1: l1 -> l2
        --2: l1 -> l3
        --3: l2 -> l3
        --4: l2 -> l4
        --5: l3 -> l4
        --6: l3 -> l1
        --7: l4 -> l1
        --8: l4 -> l2
        state: {p1, p2, p3, p4, p5, p6, p7, p8};
    ASSIGN
        init(state) := {p1, p2, p3, p4, p5, p6, p7, p8};
        next(state) := {p1, p2, p3, p4, p5, p6, p7, p8};

        -- l1
        next(l1) :=
            case
                -- l1 -> l2
                (state = p1 & l1 != 0 & l2 = 0 & l1 = 9): 0;
                -- l1 -> l3
                (state = p2 & l1 != 0 & l3 = 0 & l1 = 13): 0;
                -- l3 -> l1
                (state = p6 & l3 != 0 & l1 = 0 & l3 = 5): l3;
                -- l4 -> l1
                (state = p7 & l4 != 0 & l1 = 0 & l4 = 5): l4;
                TRUE: l1;
            esac;
        -- l2
        next(l2) :=
            case
                -- l2 -> l3
                (state = p3 & l2 != 0 & l3 = 0 & l2 = 13): 0;
                -- l2 -> l4
                (state = p4 & l2 != 0 & l4 = 0 & l2 = 1): 0;
                -- l4 -> l2
                (state = p8 & l4 != 0 & l2 = 0 & l4 = 9): l4;
                -- l1 -> l2
                (state = p1 & l1 != 0 & l2 = 0 & l1 = 9): l1;
                TRUE: l2;
            esac;
        -- l3
        next(l3) :=
            case
                -- l3 -> l4
                (state = p5 & l3 != 0 & l4 = 0 & l3 = 1): 0;
                -- l3 -> l1
                (state = p6 & l3 != 0 & l1 = 0 & l3 = 5): 0;
                -- l1 -> l3
                (state = p2 & l1 != 0 & l3 = 0 & l1 = 13): l1;
                -- l2 -> l3
                (state = p3 & l2 != 0 & l3 = 0 & l2 = 13): l2;
                TRUE: l3;
            esac;
        -- l4
        next(l4) :=
            case
                -- l4 -> l1
                (state = p7 & l4 != 0 & l1 = 0 & l4 = 5): 0;
                -- l4 -> l2
                (state = p8 & l4 != 0 & l2 = 0 & l4 = 9): 0;
                -- l2 -> l4
                (state = p4 & l2 != 0 & l4 = 0 & l2 = 1): l2;
                -- l3 -> l4
                (state = p5 & l3 != 0 & l4 = 0 & l3 = 1): l3;
                TRUE: l4;
            esac;

